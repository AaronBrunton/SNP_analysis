names(Boot_res)[j] <- samp_size[j]
Sampled_loc[[j]] <- Tmp_loc
names(Sampled_loc)[j] <- samp_size[j]
Sampled_Ind[[j]] <- Tmp_ind
names(Sampled_Ind)[j] <- Ind_samp_size[k]
remove(Tmp_res, Tmp_loc)
}
}
# How many boostraps do we want
boots <- 100
samp_size <- seq(from = 100, to= nSNPs, by = 100)
Ind_samp_size <- seq(from = 5, to= nInds, by = 5)
Sampled_loc <- list() # Make a list to store the locus names in each boostrap sample, maybe also do some kind of seed??
Boot_res <- list()
# Just test against different SNP thresholds, includes all individuals
for (j in 1:length(samp_size)) {
Tmp_res <- list()
Tmp_loc <- list()
for(i in 1:boots){
sampled_data <-genind_data[,sample(nLoc(genind_data), size = samp_size[j], replace = T)]
Tmp_loc[[i]] <- colnames(sampled_data@tab) # Get locus names considered in the sampling replicate
names(Tmp_loc)[[i]] <- paste("Sample", i, "loci", samp_size[j], sep = '_')
# Convert for summary stat estimation
gl_mod <- gi2gl(sampled_data, verbose = 0)
# Estimate stats
Sub_het <- gl.report.heterozygosity(gl_mod, plot.out = F)
# Extract columsn we are intersted in by name
cols <- c("Ho", "He", "uHe", "FIS")
Sub_het <- Sub_het[,which(colnames(Sub_het) %in% cols)]
rownames(Sub_het) <- paste("Samp", i, "est", samp_size[j], sep = '_')
# Calculate error (actual stat - subsample estimate)
Error <- Sub_het - Emp_het
rownames(Error) <- paste("Samp", i, "error", samp_size[j], sep = '_')
MSE <- Error^2
rownames(MSE) <- paste("Samp", i, "MSE", samp_size[j], sep = '_')
Sub_est <- rbind(Sub_het, Error, MSE)
Sub_est$Stat <- c("Est", "Error", "MSE")
Sub_est$nSNP <- samp_size[j]
# Put into our list of results
Tmp_res[[i]] <- Sub_est
# Get rid of anything just to be safe
remove(cols, Sub_het, Error, MSE, Sub_est, gl_mod, sampled_data)
}
Boot_res[[j]] <- Tmp_res
names(Boot_res)[j] <- samp_size[j]
Sampled_loc[[j]] <- Tmp_loc
names(Sampled_loc)[j] <- samp_size[j]
remove(Tmp_res, Tmp_loc)
}
# Test different SNP and individual combination
Sampled_loc <- list() # Make a list to store the locus names in each boostrap sample, maybe also do some kind of seed??
Sampled_Ind <- list()
Boot_res_ind <- list()
Ind_SNP_res <- list()
# Just test against different individual thresholds, includes all SNPs
for (j in 1:length(Ind_samp_size)) {
Tmp_res <- list()
Tmp_ind <- list()
for(i in 1:boots){
sampled_data <-genind_data[sample(nInd(genind_data), size = Ind_samp_size[k], replace = T),]
Tmp_ind[[i]] <- rownames(sampled_data@tab) # Get locus names considered in the sampling replicate
names(Tmp_ind)[[i]] <- paste("Sample", i, "ind", Ind_samp_size[j], sep = '_')
# Convert for summary stat estimation
gl_mod <- gi2gl(sampled_data, verbose = 0)
# Estimate stats
Sub_het <- gl.report.heterozygosity(gl_mod, plot.out = F)
# Extract columsn we are intersted in by name
cols <- c("Ho", "He", "uHe", "FIS")
Sub_het <- Sub_het[,which(colnames(Sub_het) %in% cols)]
rownames(Sub_het) <- paste("Samp", i, "est", Ind_samp_size[j], sep = '_')
# Calculate error (actual stat - subsample estimate)
Error <- Sub_het - Emp_het
rownames(Error) <- paste("Samp", i, "error", Ind_samp_size[j], sep = '_')
MSE <- Error^2
rownames(MSE) <- paste("Samp", i, "MSE", Ind_samp_size[j], sep = '_')
Sub_est <- rbind(Sub_het, Error, MSE)
Sub_est$Stat <- c("Est", "Error", "MSE")
Sub_est$nInd <- Ind_samp_size[j]
# Put into our list of results
Tmp_res[[i]] <- Sub_est
# Get rid of anything just to be safe
remove(cols, Sub_het, Error, MSE, Sub_est, gl_mod, sampled_data)
}
Boot_res_ind[[j]] <- Tmp_res
names(Boot_res_ind)[j] <- Ind_samp_size[j]
Sampled_ind[[j]] <- Tmp_ind
names(Sampled_ind)[j] <- Ind_samp_size[j]
remove(Tmp_res, Tmp_ind)
}
# Test different SNP and individual combination
# Make a list to store the locus names in each boostrap sample, maybe also do some kind of seed??
Sampled_Ind <- list()
Boot_res_ind <- list()
Ind_SNP_res <- list()
# Just test against different individual thresholds, includes all SNPs
for (j in 1:length(Ind_samp_size)) {
Tmp_res <- list()
Tmp_ind <- list()
for(i in 1:boots){
sampled_data <-genind_data[sample(nInd(genind_data), size = Ind_samp_size[k], replace = T),]
Tmp_ind[[i]] <- rownames(sampled_data@tab) # Get locus names considered in the sampling replicate
names(Tmp_ind)[[i]] <- paste("Sample", i, "ind", Ind_samp_size[j], sep = '_')
# Convert for summary stat estimation
gl_mod <- gi2gl(sampled_data, verbose = 0)
# Estimate stats
Sub_het <- gl.report.heterozygosity(gl_mod, plot.out = F)
# Extract columsn we are intersted in by name
cols <- c("Ho", "He", "uHe", "FIS")
Sub_het <- Sub_het[,which(colnames(Sub_het) %in% cols)]
rownames(Sub_het) <- paste("Samp", i, "est", Ind_samp_size[j], sep = '_')
# Calculate error (actual stat - subsample estimate)
Error <- Sub_het - Emp_het
rownames(Error) <- paste("Samp", i, "error", Ind_samp_size[j], sep = '_')
MSE <- Error^2
rownames(MSE) <- paste("Samp", i, "MSE", Ind_samp_size[j], sep = '_')
Sub_est <- rbind(Sub_het, Error, MSE)
Sub_est$Stat <- c("Est", "Error", "MSE")
Sub_est$nInd <- Ind_samp_size[j]
# Put into our list of results
Tmp_res[[i]] <- Sub_est
# Get rid of anything just to be safe
remove(cols, Sub_het, Error, MSE, Sub_est, gl_mod, sampled_data)
}
Boot_res_ind[[j]] <- Tmp_res
names(Boot_res_ind)[j] <- Ind_samp_size[j]
Sampled_Ind[[j]] <- Tmp_ind
names(Sampled_Ind)[j] <- Ind_samp_size[j]
remove(Tmp_res, Tmp_ind)
}
# How many boostraps do we want
boots <- 100
samp_size <- seq(from = 100, to= nSNPs, by = 100)
Ind_samp_size <- seq(from = 5, to= nInds, by = 5)
Sampled_loc <- list() # Make a list to store the locus names in each boostrap sample, maybe also do some kind of seed??
Boot_res <- list()
# Just test against different SNP thresholds, includes all individuals
for (j in 1:length(samp_size)) {
Tmp_res <- list()
Tmp_loc <- list()
for(i in 1:boots){
sampled_data <-genind_data[,sample(nLoc(genind_data), size = samp_size[j], replace = T)]
Tmp_loc[[i]] <- colnames(sampled_data@tab) # Get locus names considered in the sampling replicate
names(Tmp_loc)[[i]] <- paste("Sample", i, "loci", samp_size[j], sep = '_')
# Convert for summary stat estimation
gl_mod <- gi2gl(sampled_data, verbose = 0)
# Estimate stats
Sub_het <- gl.report.heterozygosity(gl_mod, plot.out = F)
# Extract columsn we are intersted in by name
cols <- c("Ho", "He", "uHe", "FIS")
Sub_het <- Sub_het[,which(colnames(Sub_het) %in% cols)]
rownames(Sub_het) <- paste("Samp", i, "est", samp_size[j], sep = '_')
# Calculate error (actual stat - subsample estimate)
Error <- Sub_het - Emp_het
rownames(Error) <- paste("Samp", i, "error", samp_size[j], sep = '_')
MSE <- Error^2
rownames(MSE) <- paste("Samp", i, "MSE", samp_size[j], sep = '_')
Sub_est <- rbind(Sub_het, Error, MSE)
Sub_est$Stat <- c("Est", "Error", "MSE")
Sub_est$nSNP <- samp_size[j]
# Put into our list of results
Tmp_res[[i]] <- Sub_est
# Get rid of anything just to be safe
remove(cols, Sub_het, Error, MSE, Sub_est, gl_mod, sampled_data)
}
Boot_res[[j]] <- Tmp_res
names(Boot_res)[j] <- samp_size[j]
Sampled_loc[[j]] <- Tmp_loc
names(Sampled_loc)[j] <- samp_size[j]
remove(Tmp_res, Tmp_loc)
}
save.image("C:/Users/Brokenman/Desktop/Github/SNP_analysis/SNP_optimization.RData")
load("C:/Users/Brokenman/Desktop/Github/SNP_analysis/SNP_optimization.RData")
View(Sampled_loc)
Sampled_loc_df <- do.call('rbind', Sampled_loc)
View(Sampled_loc_df)
Sampled_loc_df <- as.data.frame(do.call('rbind', Sampled_loc))
library(purrr)
purrr::iwalk(
.x = Sampled_loc,
.f = function(x, y) {
x <- as.data.frame(x)
y <- paste0('dataframe', y)
assign(y, x, envir = globalenv())
}
)
View(dataframe900)
load("C:/Users/Brokenman/Desktop/Github/SNP_analysis/SNP_optimization.RData")
lapply(Sampled_loc, as.data.frame)
Test <- lapply(Sampled_loc, as.data.frame)
View(Test)
Test[["100"]]
remove(Test)
# Look for any duplicate samples
Dup_SNP_check <- lapply(Sampled_loc, as.data.frame)
duplicated(Dup_SNP_check[[1]])
table(lapply(Dup_SNP_check, duplicated))
table(unlist(Dup_SNP_check))
tmp <- table(duplicated(Dup_SNP_check[[1]]))
tmp
tmp <- as.data.frame(table(duplicated(Dup_SNP_check[[1]])))
tmp
tmp <- table(duplicated(Dup_SNP_check[[1]]))
tmp
colnames(tmp)
names(tmp)
names(tmp) == FALSE
names(tmp) == TRUE
for(i in 1:length(Dup_SNP_check)){
tmp <- table(duplicated(Dup_SNP_check[[i]]))
if(names(tmp) == FALSE) {
print(paste('Duplicates found in ', Dup_SNP_check[[i]], sep = ""))
}
}
names(Dup_SNP_check)
# Look for any duplicate samples
Dup_SNP_check <- lapply(Sampled_loc, as.data.frame)
for(i in 1:length(Dup_SNP_check)){
tmp <- table(duplicated(Dup_SNP_check[[i]]))
if(names(tmp) == FALSE) {
print(paste('Duplicates found in ', names(Dup_SNP_check)[i], sep = ""))
}
names(tmp) == TRUE
for(i in 1:length(Dup_SNP_check)){
tmp <- table(duplicated(Dup_SNP_check[[i]]))
if(names(tmp) == TRUE) {
print(paste('Duplicates found in ', names(Dup_SNP_check)[i], sep = ""))
}
}
remove(Ind_SNP_res)
### Investigate results
nSNP_res <- as.data.frame(do.call('rbind', Boot_res))
View(nSNP_res)
View(Boot_res)
### Investigate results
nSNP_res <- lapply(Boot_res, as.data.frame)
View(nSNP_res)
nSNP_res[["100"]]
Boot_res[[1]][[1]]
### Investigate results
nSNP_res <- lapply(Boot_res, rbind.data.frame)
View(nSNP_res)
### Investigate results
nSNP_res <- bind_rows(Boot_res)
library(dplyr)
### Investigate results
nSNP_res <- bind_rows(Boot_res)
# Look at some stats
nSNP_res %>% group_by(Stat, nSNP) %>% summarise(mean_stat = mean(Stat)) %>%
ungroup()
remove(Dup_SNP_check)
ungroup()
# Look at some stats
nSNP_res %>% group_by(Stat, nSNP) %>% summarise(across(c(Ho, He, uHe, FIS),mean)) %>%
ungroup()
# Look at some stats
Stats <- nSNP_res %>% group_by(Stat, nSNP) %>% summarise(across(c(Ho, He, uHe, FIS),mean)) %>%
ungroup()
View(Stats)
library(dartR)
Ho_stat <- Stats %>% select(Stat,nSNP, Ho)
He_stat <- Stats %>% select(Stat,nSNP, He)
uHe_stat <- Stats %>% select(Stat,nSNP, uHe)
FIS_stat <- Stats %>% select(Stat,nSNP, FIS)
View(Ho_stat)
Stats$Stats <- as.factor(Stats$Stats)
Stats$Stats <- as.factor(Stats$Stat)
Stast$nSNP <- as.factor(Stats$nSNP)
Stats$nSNP <- as.factor(Stats$nSNP)
Ho_stat <- Stats %>% select(Stat,nSNP, Ho)
He_stat <- Stats %>% select(Stat,nSNP, He)
uHe_stat <- Stats %>% select(Stat,nSNP, uHe)
FIS_stat <- Stats %>% select(Stat,nSNP, FIS)
## Let's plot it, first we will melt the data frame
ggplot() + geom_point(data = Ho_stat, aes(x = nSNP, y = Stat, color = Stat), alpha = 0.5) +
scale_color_manual(values = c('MSE' = '#f46d43', 'Error' = '#a50026', 'Est' = '#4575b4')) +
facet_wrap( ~ Stat, ncol = 1)
## Let's plot it
ggplot() + geom_point(data = Ho_stat, aes(x = nSNP, y = Stat, color = Stat), alpha = 0.5) +
scale_color_manual(values = c('MSE' = '#f46d43', 'Error' = '#a50026', 'Est' = '#4575b4')) +
geom_smooth() + theme_classic()
## Let's plot it
ggplot() + geom_point(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat), alpha = 0.5) +
scale_color_manual(values = c('MSE' = '#f46d43', 'Error' = '#a50026', 'Est' = '#4575b4')) +
geom_smooth() + theme_classic() + facet_wrap( ~ Stat, ncol = 1)
## Let's plot it
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho)) + geom_point(aes(color = Stat), alpha = 0.5) +
scale_color_manual(values = c('MSE' = '#f46d43', 'Error' = '#a50026', 'Est' = '#4575b4')) +
geom_smooth() + theme_classic() + facet_wrap( ~ Stat, ncol = 1)
## Let's plot it
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho)) + geom_point(aes(color = Stat), alpha = 0.5) +
scale_color_manual(values = c('MSE' = '#f46d43', 'Error' = '#a50026', 'Est' = '#4575b4')) +
geom_smooth() + theme_classic() + facet_wrap( ~ Stat, ncol = 1)
View(Ho_stat)
Stats$Stats <- as.factor(Stats$Stat)
Stats$nSNP <- as.numeric(Stats$nSNP)
Ho_stat <- Stats %>% select(Stat,nSNP, Ho)
He_stat <- Stats %>% select(Stat,nSNP, He)
uHe_stat <- Stats %>% select(Stat,nSNP, uHe)
FIS_stat <- Stats %>% select(Stat,nSNP, FIS)
## Let's plot it
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho)) + geom_point(aes(color = Stat), alpha = 0.5) +
scale_color_manual(values = c('MSE' = '#f46d43', 'Error' = '#a50026', 'Est' = '#4575b4')) +
geom_smooth() + theme_classic() + facet_wrap( ~ Stat, ncol = 1)
## Let's plot it
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho), color = Stat) + geom_point(alpha = 0.5) +
scale_color_manual(values = c('MSE' = '#f46d43', 'Error' = '#a50026', 'Est' = '#4575b4')) +
geom_smooth() + theme_classic() + facet_wrap( ~ Stat, ncol = 1)
## Let's plot it
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point( alpha = 0.5) +
scale_color_manual(values = c('MSE' = '#f46d43', 'Error' = '#a50026', 'Est' = '#4575b4')) +
geom_smooth() + theme_classic() + facet_wrap( ~ Stat, ncol = 1)
## Let's plot it for each statistic, if you want to make separe tiles use something like facet_wrap( ~ Stat, ncol = 1)
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point( alpha = 0.5) +
scale_color_manual(values = c('MSE' = '#f46d43', 'Error' = '#a50026', 'Est' = '#4575b4')) +
geom_smooth() + theme_classic()
View(nSNP_res)
nSNP_res$Stats <- as.factor(nSNP_res$Stat)
nSNP_res$nSNP <- as.numeric(nSNP_res$nSNP)
Ho_stat <- nSNP_res %>% select(Stat,nSNP, Ho)
He_stat <- nSNP_res %>% select(Stat,nSNP, He)
uHe_stat <- nSNP_res %>% select(Stat,nSNP, uHe)
FIS_stat <- nSNP_res %>% select(Stat,nSNP, FIS)
## Let's plot it for each statistic, if you want to make separe tiles use something like facet_wrap( ~ Stat, ncol = 1)
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point( alpha = 0.5) +
scale_color_manual(values = c('MSE' = '#f46d43', 'Error' = '#a50026', 'Est' = '#4575b4')) +
geom_smooth() + theme_classic() + xlab('Number of SNPS') + ylab("Observed Heterozygosity")
## Let's plot it for each statistic
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point( alpha = 0.5) +
scale_color_manual(values = c('MSE' = '#f46d43', 'Error' = '#a50026', 'Est' = '#4575b4')) +
geom_smooth() + theme_classic() + xlab('Number of SNPS') + ylab("Observed Heterozygosity") +
facet_wrap( ~ Stat, ncol = 1)
## Let's plot it for each statistic
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point( alpha = 0.5) +
scale_color_manual(values = c('MSE' = '#f46d43', 'Error' = '#a50026', 'Est' = '#4575b4')) +
geom_smooth() + theme_classic() + xlab('Number of SNPS') +
facet_wrap( ~ Stat)
levels(Ho_stat$Stat)
View(Ho_stat)
str(Ho_stat)
# Set new names for our plots
Ho_stat$Stat[Ho_stat$Stat == "Est"] <- 'Oberserved Heterozygosity'
Ho_stat$Stat[Ho_stat$Stat == "MSE"] <- 'Squared Error'
str(Ho_stat)
## Let's plot it for each statistic
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point( alpha = 0.5) +
scale_color_manual(values = c('MSE' = '#f46d43', 'Error' = '#a50026', 'Est' = '#4575b4')) +
geom_smooth() + theme_classic() + xlab('Number of SNPS') +
facet_wrap( ~ Stat)
Ho_stat$Stat <- as.factor(Ho_stat$Stat)
## Let's plot it for each statistic
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point( alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026', 'Oberserved Heterozygosity' = '#4575b4')) +
geom_smooth() + theme_classic() + xlab('Number of SNPS') +
facet_wrap( ~ Stat)
str(Ho_stat)
Ho_stat <- nSNP_res %>% select(Stat,nSNP, Ho)
He_stat <- nSNP_res %>% select(Stat,nSNP, He)
uHe_stat <- nSNP_res %>% select(Stat,nSNP, uHe)
FIS_stat <- nSNP_res %>% select(Stat,nSNP, FIS)
# Set new names for our plots
Ho_stat$Stat[Ho_stat$Stat == "Est"] <- 'Observed Heterozygosity'
Ho_stat$Stat[Ho_stat$Stat == "MSE"] <- 'Squared Error'
Ho_stat$Stat <- as.factor(Ho_stat$Stat)
## Let's plot it for each statistic
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point( alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026', 'Observed Heterozygosity' = '#4575b4')) +
geom_smooth() + theme_classic() + xlab('Number of SNPS') +
facet_wrap( ~ Stat)
levels(Ho_stat$Stat)
# Reorder levels for plotting purposes
Ho_stat$Stat <- factor(Ho_stat$Stat, levels = c('Observed Heterozygosity', 'Error', 'Squared Error'))
# Check to make sure it worked
levels(Ho_stat$Stat)
## Let's plot it for each statistic
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point( alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026', 'Observed Heterozygosity' = '#4575b4')) +
geom_smooth() + theme_classic() + xlab('Number of SNPS') +
facet_wrap( ~ Stat)
## Let's plot it for each statistic
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point( alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026', 'Observed Heterozygosity' = '#4575b4')) +
geom_smooth() + theme_classic() + xlab('Number of SNPS') +  ylab("") +
facet_wrap( ~ Stat) + theme(legend.position="none")
## Let's plot it for each statistic
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point(alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026', 'Observed Heterozygosity' = '#4575b4')) +
geom_smooth(color = 'black') + theme_classic() + xlab('Number of SNPS') +
facet_wrap( ~ Stat) + theme(legend.position="none", axis.text.y=element_blank())
## Let's plot it for each statistic, can add best fit line using geom_smooth(color = 'black')
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point(alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026',
'Observed Heterozygosity' = '#4575b4')) +
theme_classic() + xlab('Number of SNPS') +
facet_wrap( ~ Stat) + theme(legend.position="none", axis.text.y=element_blank())
## Let's plot it for observed heterozygosity, we can add best fit line using geom_smooth(color = 'black')
Ho_SNPs <- ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point(alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026',
'Observed Heterozygosity' = '#4575b4')) +
theme_classic() + xlab('Number of SNPS') +
facet_wrap( ~ Stat) + theme(legend.position="none", axis.text.y=element_blank())
Ho_SNPs
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point(alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026',
'Observed Heterozygosity' = '#4575b4')) +
theme_classic() + xlab('Number of SNPS') +
facet_wrap( ~ Stat) + theme(legend.position="none", axis.text.y=element_blank())
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point(alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026',
'Observed Heterozygosity' = '#4575b4')) +
theme_classic() + xlab('Number of SNPS') +
facet_wrap( ~ Stat) + theme(legend.position="none", axis.text.y=element_blank())
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point(alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026',
'Observed Heterozygosity' = '#4575b4')) +
theme_classic() + xlab('Number of SNPS') + ylab(NULL) +
facet_wrap( ~ Stat) + theme(legend.position="none", axis.text.y=element_blank(), axis.ticks.y = element_blank())
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point(alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026',
'Observed Heterozygosity' = '#4575b4')) +
theme_classic() + xlab('Number of SNPS') + ylab(NULL) + facet_wrap( ~ Stat) + theme(legend.position="none")
ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point(alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026',
'Observed Heterozygosity' = '#4575b4')) +
theme_classic() + xlab('Number of SNPS') + ylab(NULL) + facet_wrap( ~ Stat, scales = "fixed") +
theme(legend.position="none")
Dup_Ind_check <- lapply(Sampled_Ind, as.data.frame)
for(i in 1:length(Dup_Ind_check)){
tmp <- table(duplicated(Dup_Ind_check[[i]]))
if(names(tmp) == TRUE) {
print(paste('Duplicates found in ', names(Dup_Ind_check)[i], sep = ""))
}
}
remove(Dup_Ind_check)
## Let's plot it for observed heterozygosity, we can add best fit line using geom_smooth(color = 'black')
Ho_SNPs <- ggplot(data = Ho_stat, aes(x = nSNP, y = Ho, color = Stat)) + geom_point(alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026',
'Observed Heterozygosity' = '#4575b4')) +
theme_classic() + xlab('Number of SNPS') + ylab(NULL) + facet_wrap( ~ Stat, scales = "fixed") +
theme(legend.position="none")
### Investigate results
# Bind list into a single data frame
nInd_res <- bind_rows(Boot_res_ind)
# Look at some stats, we group the data by the statistic (error, MSE, estiamte) and by the number of SNPs in the run
Stats_Ind <- nInd_res %>% group_by(Stat, nSNP) %>% summarise(across(c(Ho, He, uHe, FIS),mean)) %>%
ungroup()
View(nInd_res)
Stats_Ind <- nInd_res %>% group_by(Stat, nInd) %>% summarise(across(c(Ho, He, uHe, FIS),mean)) %>%
ungroup()
nInd_res$Stats <- as.factor(nInd_res$Stat)
nInd_res$nSNP <- as.numeric(nInd_res$nSNP)
He_stat_ind <- nInd_res %>% select(Stat,nInd, He)
View(nInd_res)
### Investigate results
# Bind list into a single data frame
nInd_res <- bind_rows(Boot_res_ind)
# Look at some stats, we group the data by the statistic (error, MSE, estiamte) and by the number of SNPs in the run
Stats_Ind <- nInd_res %>% group_by(Stat, nInd) %>% summarise(across(c(Ho, He, uHe, FIS),mean)) %>%
ungroup()
nInd_res$Stat <- as.factor(nInd_res$Stat)
nInd_res$nSNP <- as.numeric(nInd_res$nSNP)
nInd_res$Stat <- as.factor(nInd_res$Stat)
nInd_res$nInd <- as.numeric(nInd_res$nInd)
Ho_stat_ind <- nInd_res %>% select(Stat,nInd, Ho)
He_stat_ind <- nInd_res %>% select(Stat,nInd, He)
uHe_stat_ind <- nInd_res %>% select(Stat,nInd, uHe)
FIS_stat_ind <- nInd_res %>% select(Stat,nInd, FIS)
# Set new names for our plots
Ho_stat_ind$Stat[Ho_stat_ind$Stat == "Est"] <- 'Observed Heterozygosity'
Ho_stat_ind$Stat[Ho_stat_ind$Stat == "MSE"] <- 'Squared Error'
Ho_stat_ind$Stat <- as.factor(Ho_stat_ind$Stat)
str(Ho_stat_ind)
Ho_stat_ind <- nInd_res %>% select(Stat,nInd, Ho)
str(Ho_stat_ind)
levels(Ho_stat_ind)
levels(Ho_stat_ind$Stat)
### Investigate results
# Bind list into a single data frame
nInd_res <- bind_rows(Boot_res_ind)
# Look at some stats, we group the data by the statistic (error, MSE, estiamte) and by the number of SNPs in the run
Stats_Ind <- nInd_res %>% group_by(Stat, nInd) %>% summarise(across(c(Ho, He, uHe, FIS),mean)) %>%
ungroup()
nInd_res$nInd <- as.numeric(nInd_res$nInd)
str(Ho_stat_ind)
Ho_stat_ind <- nInd_res %>% select(Stat,nInd, Ho)
# Set new names for our plots
Ho_stat_ind$Stat[Ho_stat_ind$Stat == "Est"] <- 'Observed Heterozygosity'
Ho_stat_ind$Stat[Ho_stat_ind$Stat == "MSE"] <- 'Squared Error'
str(Ho_stat_ind)
Ho_stat_ind$Stat <- as.factor(Ho_stat_ind$Stat)
levels(Ho_stat_ind$Stat)
# Reorder levels for plotting purposes
Ho_stat_ind$Stat <- factor(Ho_stat$Stat, levels = c('Observed Heterozygosity', 'Error', 'Squared Error'))
# Check to make sure it worked
levels(Ho_stat$Stat)
# Reorder levels for plotting purposes
Ho_stat_ind$Stat <- factor(Ho_stat_ind$Stat, levels = c('Observed Heterozygosity', 'Error', 'Squared Error'))
# Check to make sure it worked
levels(Ho_stat$Stat)
ggplot(data = Ho_stat_ind, aes(x = nInd, y = Ho, color = Stat)) + geom_point(alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026',
'Observed Heterozygosity' = '#4575b4')) +
theme_classic() + xlab('Number of Individuals') + ylab(NULL) + facet_wrap( ~ Stat, scales = "fixed") +
theme(legend.position="none")
## Let's plot it for observed heterozygosity, we can add best fit line using geom_smooth(color = 'black')
Ho_Inds <- ggplot(data = Ho_stat_ind, aes(x = nInd, y = Ho, color = Stat)) + geom_point(alpha = 0.5) +
scale_color_manual(values = c('Squared Error' = '#f46d43', 'Error' = '#a50026',
'Observed Heterozygosity' = '#4575b4')) +
theme_classic() + xlab('Number of Individuals') + ylab(NULL) + facet_wrap( ~ Stat, scales = "fixed") +
theme(legend.position="none")
library(cowplot)
plot_grid(Ho_SNPs, Ho_Inds, nrow = 2)
save.image("C:/Users/Brokenman/Desktop/Github/SNP_analysis/SNP_optimization.RData")
