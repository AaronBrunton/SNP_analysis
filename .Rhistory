p1 <- ggplot(to_plot, aes(ord, val)) + geom_bar(stat = 'identity', fill = c('dodgerblue','lightblue','#cc5500','salmon')) +
geom_errorbar(aes(x = ord, ymin = val, ymax = val+sem), width = 0.5, color = 'black')
p2 <- p1 + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('Day 9 Male Tissues') +
theme_classic() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank())
p2
p2_f
# Plot female data
p1_f <- ggplot(to_plot_f, aes(ord, val_f)) + geom_bar(stat = 'identity', fill = c('dodgerblue','lightblue','#cc5500','salmon')) +
geom_errorbar(aes(x = ord, ymin = val_f, ymax = val_f+sem), width = 0.5, color = 'black')
p2_f <- p1_f + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('Day 9 Female Tissues') +
theme_classic() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank())
p2_f
val_f <- c(1, 0.145, 1.363, 14.855, 20.349) # The last one is a dummy so that the scales are the same
to_plot_f <- data.frame(val_f)
to_plot_f$tissue <- labs
to_plot_f <- data.frame(val_f)
to_plot_f$tissue <- c(labs, "Dummy")
to_plot_f$ord <- c(1,2,3,4, 5)
to_plot_f$sem <- c(0.024,0.017,0.167,2.448, 3.104) # The last one is a dummy so that the scales are the same
to_plot_f$col <- c('lightblue','dodgerblue','lightsalmon','salmon', 'white')
rownames(to_plot_f) <- labs
rownames(to_plot_f) <- c(labs, "Dummy")
View(to_plot_f)
# Plot female data
p1_f <- ggplot(to_plot_f, aes(ord, val_f)) + geom_bar(stat = 'identity', fill = c('dodgerblue','lightblue','#cc5500','salmon')) +
geom_errorbar(aes(x = ord, ymin = val_f, ymax = val_f+sem), width = 0.5, color = 'black')
p2_f <- p1_f + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('Day 9 Female Tissues') +
theme_classic() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank())
p2_f
# Plot female data
p1_f <- ggplot(to_plot_f, aes(ord, val_f)) + geom_bar(stat = 'identity', fill = c('dodgerblue','lightblue','#cc5500','salmon', 'white')) +
geom_errorbar(aes(x = ord, ymin = val_f, ymax = val_f+sem), width = 0.5, color = 'black')
p2_f <- p1_f + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('Day 9 Female Tissues') +
theme_classic() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank())
p2_f
to_plot_f <- data.frame(val_f)
to_plot_f$tissue <- c(labs, "Dummy")
to_plot_f$ord <- c(1,2,3,4, 5)
to_plot_f$sem <- c(0.024,0.017,0.167,2.448, NULL) # The last one is a dummy so that the scales are the same
to_plot_f <- data.frame(val_f)
to_plot_f$tissue <- c(labs, "Dummy")
to_plot_f$ord <- c(1,2,3,4, 5)
p1 <- ggplot(to_plot, aes(ord, val)) + geom_bar(stat = 'identity', fill = c('dodgerblue','lightblue','#cc5500','salmon')) +
geom_errorbar(aes(x = ord, ymin = val, ymax = val+sem), width = 0.5, color = 'black')
p2 <- p1 + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('D9 Male Tissues') +
theme_classic() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank())
p2
# Plot female data
p1_f <- ggplot(to_plot_f, aes(ord, val_f)) + geom_bar(stat = 'identity', fill = c('dodgerblue','lightblue','#cc5500','salmon', 'white')) +
geom_errorbar(aes(x = ord, ymin = val_f, ymax = val_f+sem), width = 0.5, color = 'black')
p2_f <- p1_f + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('D9 Female Tissues') +
theme_classic() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank())
p2_f
plot_grid(p2, p2_f, nrow = 1)
ggplot(to_plot_f, aes(ord, val_f)) + geom_bar(stat = 'identity', fill = c('dodgerblue','lightblue','#cc5500','salmon', 'white')) +
geom_errorbar(aes(x = ord, ymin = val_f, ymax = val_f+sem), width = 0.5, color = 'black')
to_plot_f <- data.frame(val_f)
to_plot_f$tissue <- c(labs, "Dummy")
to_plot_f$ord <- c(1,2,3,4, 5)
to_plot_f$sem <- c(0.024,0.017,0.167,2.448, 3.104) # The last one is a dummy so that the scales are the same
to_plot_f$col <- c('lightblue','dodgerblue','lightsalmon','salmon', 'white')
rownames(to_plot_f) <- c(labs, "Dummy")
gplot(to_plot_f, aes(ord, val_f)) + geom_bar(stat = 'identity', fill = c('dodgerblue','lightblue','#cc5500','salmon', 'white')) +
geom_errorbar(aes(x = ord, ymin = val_f, ymax = val_f+sem), width = 0.5, color = 'black')
ggplot(to_plot_f, aes(ord, val_f)) + geom_bar(stat = 'identity', fill = c('dodgerblue','lightblue','#cc5500','salmon', 'white')) +
geom_errorbar(aes(x = ord, ymin = val_f, ymax = val_f+sem), width = 0.5, color = 'black')
p1_f + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('D9 Female Tissues') +
theme_classic() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank())
# Plot female data
p1_f <- ggplot(to_plot_f, aes(ord, val_f)) + geom_bar(stat = 'identity', fill = c('dodgerblue','lightblue','#cc5500','salmon', 'white')) +
geom_errorbar(aes(x = ord, ymin = val_f, ymax = val_f+sem), width = 0.5, color = 'black')
p2_f <- p1_f + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('D9 Female Tissues') +
theme_classic() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank())
p2_f
plot_grid(p2, p2_f, nrow = 1)
p2
p2_f
p1_f + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('D9 Female Tissues') +
theme_classic() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank(), axis.text = element_text(size = 2))
p1_f + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('D9 Female Tissues') +
theme_classic() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank(), axis.text = element_text(size = 18))
p1_f + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('D9 Female Tissues') +
theme_classic() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank(), axis.text = element_text(size = 14))
p1_f + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('D9 Female Tissues', size = 14) +
theme_classic() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank(), axis.text = element_text(size = 14))
p1_f + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression"), size = 14), x = NULL) + ggtitle('D9 Female Tissues', size = 14) +
theme_classic() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank(), axis.text = element_text(size = 14))
p1_f + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('D9 Female Tissues', size = 14) +
theme_classic() + theme(plot.title = element_text(hjust = 0.5, size = 14), axis.text.x = element_blank(), axis.text = element_text(size = 14))
p1_f + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('D9 Female Tissues') +
theme_classic() + theme(plot.title = element_text(hjust = 0.5, size = 14), axis.text.x = element_blank(), axis.text = element_text(size = 14))
p1_f + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('D9 Female Tissues') +
theme_classic() + theme(plot.title = element_text(hjust = 0.5, size = 14), axis.text.x = element_blank(),
axis.text = element_text(size = 14), axis.title.y = element_text(size = 14))
p1 + scale_y_break(c(4,14), ticklabels = c(0,2,4,14,16,18,20,22,24)) +
labs(y = expression(paste("Relative ", italic(fmr1), " Expression")), x = NULL) + ggtitle('D9 Male Tissues') +
theme_classic() + theme(plot.title = element_text(hjust = 0.5, size = 14), axis.text.x = element_blank(),
axis.text = element_text(size = 14), axis.title.y = element_text(size = 14))
load("C:/Users/Brokenman/Desktop/Graduate_School/Side_Projects/Anolis_RADs/HINDEX/Reference/MD/PostReview_genomiccline.RData")
library(gghybrid)
hindlabel_locus = esth(data.prep.object = prepdata$data.prep, read.data.precols = dat$precols,
include.Source = T, test.subject = 'locus',
nitt = 500, burnin = 200)
Hindex_loc <- hindlabel_locus$hi
View(Hindex_loc)
summary(Hindex_loc$h_posterior_mode)
View(Beta_mean)
Hindex <- hindlabel$hi
View(Hindex)
hindlabel_locus_nosource = esth(data.prep.object = prepdata$data.prep, read.data.precols = dat$precols,
include.Source = F, test.subject = 'locus',
nitt = 500, burnin = 200)
summary(Hindex_loc_nosource$h_posterior_mode)
summary(hindlabel_locus_nosource$hi$h_posterior_mode
)
save.image("C:/Users/Brokenman/Desktop/Graduate_School/Side_Projects/Anolis_RADs/HINDEX/Reference/MD/PostReview_genomiccline.RData")
setwd("C:/Users/Brokenman/Desktop/Github/SNP_analysis")
# Define species names
species_names <- c("wolf", "butterfly", "bluejay", "centro", "coffs", "DHLiz", "egk", "cherry", "jawfish", "kpeng")
# Create a list of genind objects for each species
genind_species_list <- list(wolf_dat, butterfly_dat, bluejay_dat, centro_dat, coffs_dat, DHLiz_data, egk_dat, cherry_dat,
jawfish_dat, kpeng_dat)
# Load required packages
library(adegenet)
library(knitr)
set.seed(123)
# Function to calculate genetic diversity and FIS
calculateGeneticDiversity <- function(pop) {
n_ind <- nInd(pop)  # Number of individuals
# Calculate observed heterozygosity (Ho)
Ho <- colSums(tab(pop) == 1) / n_ind
# Calculate allele frequencies (p and q)
p <- colSums(tab(pop) == 0) / (n_ind * 2)
q <- 1 - p
# Calculate expected heterozygosity (He)
He <- 1 - (p^2 + q^2)
# Calculate unbiased expected heterozygosity (uHe)
uHe <- He * (2 * n_ind / (2 * n_ind - 1))
# Calculate inbreeding coefficient (FIS)
FIS <- (mean(He) - mean(Ho)) / mean(He)
# Return the results
return(data.frame(Observed_Heterozygosity = Ho,
Expected_Heterozygosity = He,
Unbiased_Expected_Heterozygosity = uHe,
FIS = FIS))
}
# Define parameters
replicates <- c(100, 200, 400, 500, 750)  # Number of resampling replicates
sample_sizes <- c(2, 4, 6, 8, 10, 15, 20, 25, 30)  # Number of individuals per population
snp_counts <- c(50, 100, 200, 500, 1000, 1500, 2000)  # Number of SNPs
# Create a data frame to store the multiresults
multiresults <- data.frame(Species = character(),
Replicates = integer(),
Sample_Size = integer(),
SNP_Count = integer(),
Observed_Heterozygosity = numeric(),
Expected_Heterozygosity = numeric(),
Unbiased_Expected_Heterozygosity = numeric(),
FIS = numeric())
### Load in data
Dat <- readRDS("DHLiz_genlight.rds")
### Load you pacakges
library(tidyverse)
library(caret)
View(Dat)
# Isolate genetic data
Gen <- Dat$gen
View(Gen)
Ind <- Dat[sample(nInd(Dat), size = 30), ]
View(Ind)
# Isolate genetic data
Gen <- Dat[sample(nInd(Dat), size = 30), ]
remove(Ind)
# Replace NAs with 0
sampled_data@tab[is.na(sampled_data@tab)] <- 0
Gen@tab
View(Gen)
# Read in genind datasets for each species
file_names <- c('ArWolf_data.rds', 'bfly_data.rds', 'bluejay.rds', 'centro_data.rds','coffs_genind.rds','DH_Lizard_data.rds','egk_genind.rds',
'Cherry_data.rds', 'jawfish.rds', 'kpen_data.rds') # feel free to add more genind object s if you want
# Create an empty list to store the new datasets
new_datasets <- list()
# Loop through each file
for (i in 1:length(file_names)) {
# Read in the genind dataset from the RDS file
genind_data <- readRDS(file_names[i])
# Randomly sample 30 individuals
n_ind_subsample <- 30
sampled_data <- genind_data[sample(nInd(genind_data), size = n_ind_subsample), ]
# Replace NAs with 0
sampled_data@tab[is.na(sampled_data@tab)] <- 0
# Convert 'pop' to factor class with a new name (e.g., PopA, PopB, etc.)
new_pop_name <- paste0("Pop", letters[i])  # This will create PopA, PopB, PopC, ...
sampled_data$pop <- factor(rep(new_pop_name, nInd(sampled_data)))
# Store the sampled data with the new name in the list
new_datasets[[new_pop_name]] <- sampled_data
}
i = 1
# Read in the genind dataset from the RDS file
genind_data <- readRDS(file_names[i])
# Randomly sample 30 individuals
n_ind_subsample <- 30
sampled_data <- genind_data[sample(nInd(genind_data), size = n_ind_subsample), ]
# Replace NAs with 0
sampled_data@tab[is.na(sampled_data@tab)] <- 0
View(sampled_data)
View(Gen)
View(Dat)
View(sampled_data)
i = 6
# Read in the genind dataset from the RDS file
genind_data <- readRDS(file_names[i])
# Read in genind datasets for each species
file_names <- list.files(pattern = '*.rds')
i = 2
# Read in the genind dataset from the RDS file
genind_data <- readRDS(file_names[i])
file_names
### Load in data
Dat <- readRDS("bfly_data.rds")
View(Dat)
Test <- Dat$tab
View(Test)
View(Test)
# Read in genind datasets for each species, I changed so that you don't have to list out everything
file_names <- list.files(pattern = '*.rds')
i = 2
# Read in the genind dataset from the RDS file
genind_data <- readRDS(file_names[i])
# Isolate genetic data
Gen <- Dat[sample(nInd(Dat), size = 30), ]
### Load in data
Dat <- readRDS("bfly_data.rds")
# Isolate genetic data
Gen <- Dat[sample(nInd(Dat), size = 30), ]
Gen@tab
Gen_mod <- Gen@tab[is.na(Gen@tab)] <- 0
View(Gen)
Dat@pop
genind_data@pop
sampled_data <- genind_data[sample(nInd(genind_data), size = n_ind_subsample), ]
sampled_data <- genind_data[sample(nInd(genind_data), size = 30), ]
# Replace NAs with 0
sampled_data@tab[is.na(sampled_data@tab)] <- 0
head(sampled_data@tab)
Gen <- sampled_data@tab
sampled_data <- genind_data[sample(nInd(genind_data), size = n_ind_subsample), ]
# Replace NAs with 0
sampled_data@tab[is.na(sampled_data@tab)] <- 0
Gen_org <- sampled_data@tab
View(Gen_org)
sampled_data <- genind_data[sample(nInd(genind_data), size = 30), ]
Gen_org <- sampled_data@tab
# Get the original data (NAs are NA)
Gen_org <- sampled_data@tab
# Modify and extract modified data
sampled_data@tab[is.na(sampled_data@tab)] <- 0
Gen_mod <- sampled_data@tab
View(Gen_mod)
colSums(is.na(Gen_org[,1]))
colSums(is.na(Gen_org[,1:2]))
colSums(is.na(Gen_org[,1:3]))
nrow(Gen_org)
(nrow(Gen_org) - colSums(is.na(Gen_org[,1:3])))
((nrow(Gen_org) - colSums(is.na(Gen_org[,1:3])))* 2)
colSums(Gen_org == 0, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:3])))* 2)
# Calculate p and q
# Original with KF code to account for NAs
colSums(Gen_org[,1:3] == 0, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:3])))* 2)
colSums(Gen_org[,1:3] == 0, na.rm = T)
# Calculate p and q
# Original with KF code to account for NAs
colSums(Gen_org[,1:4] == 0, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:4])))* 2)
sampled_data@loc.fac
Test <- sampled_data@loc.fac
Test
Test <- sampled_data@loc.n.all
colSums(Gen_org[,1:4] == 0, na.rm = T)
colSums(Gen_mod[,1:4] == 0 / (nrow(Gen_mod) * 2)
colSums(Gen_mod[,1:4] == 0 / (nrow(Gen_mod) * 2))
colSums(Gen_mod[,1:4] == 0) / (nrow(Gen_mod) * 2))
colSums(Gen_mod[,1:4] == 0) / (nrow(Gen_mod) * 2)
colSums(Gen_org[,1:4] == 0, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:4])))* 2)
colSums(Gen_org[,4] == 0, na.rm = T)
colSums(Gen_org[,1:4] == 0, na.rm = T)
colSums(Gen_org[,1:4] == 0, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:4])))* 2)
colSums(Gen_mod[,1:4] == 0) / (nrow(Gen_mod) * 2)
colSums(Gen_org[,1:4] == 0, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:4])))* 2)
colSums(Gen_org[,1:4] == 2, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:4])))* 2)
freq0 <- colSums(Gen_org[,1:4] == 0, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:4])))* 2)
freq2 <- colSums(Gen_org[,1:4] == 2, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:4])))* 2)
if(freq0 > freq2){
dom_allele <- 0 }
if(freq0 > freq2){
dom_allele <- 0
} else {
dom_allele <- 2
}
if(freq0 >= freq2){
dom_allele <- 0
} else {
dom_allele <- 2
}
if(freq0 >= freq2){
dom_allele <- c(dom_allele, 0)
} else {
dom_allele <- c(dom,allele, 2)
}
sum(Gen_org[,1] == 0, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1])))* 2)
colSums(Gen_org[,1:2] == 0, na.rm = T)
sum(Gen_org[,2] == 0, na.rm = T)
freq0 <- colSums(Gen_org[,1:4] == 0, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:4])))* 2)
freq2 <- colSums(Gen_org[,1:4] == 2, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:4])))* 2)
dom_allele <- list()
for (i in 1:4){
freq0 <- sum(Gen_org[,i] == 0, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
freq2 <- sum(Gen_org[,i] == 2, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
if(freq0 >= freq2){
dom_allele[[i]] <- c(dom_allele, 0)
} else {
dom_allele[[i]] <- c(dom,allele, 2)
}
}
freq0 <- colSums(Gen_org[,1:4] == 0, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:4])))* 2)
freq2 <- colSums(Gen_org[,1:4] == 2, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:4])))* 2)
dom_allele <- list()
for (i in 1:4){
freq0 <- sum(Gen_org[,i] == 0, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
freq2 <- sum(Gen_org[,i] == 2, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
if(freq0 >= freq2){
dom_allele[[i]] <- 0
} else {
dom_allele[[i]] <- 2
}
}
View(dom_allele)
dom_allele[[1]]
i = 1
sum(Gen_org[,i] == dom_allele[[i]], na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
sum(Gen_org[,i] == 1, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
hom_p <- sum(Gen_org[,i] == dom_allele[[i]], na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
het_p <- sum(Gen_org[,i] == 1, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
p <- hom_p + het_p
# Then you could calculate p
p <- list()
q <- list()
for(i in 1:4){
hom_p <- sum(Gen_org[,i] == dom_allele[[i]], na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
het_p <- sum(Gen_org[,i] == 1, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
p[[i]] <- hom_p + het_p
q[[i]] <- 1-p
remove(hom_p)
remove(het_p)
}
# Then you could calculate p
p <- list()
q <- list()
for(i in 1:4){
hom_p <- sum(Gen_org[,i] == dom_allele[[i]], na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
het_p <- sum(Gen_org[,i] == 1, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
p[[i]] <- hom_p + het_p
q[[i]] <- 1-p[[i]]
remove(hom_p)
remove(het_p)
}
View(p)
View(q)
sum(Gen_org[,i] == dom_allele[[i]], na.rm = T)
sum(Gen_org[,i] == 1, na.rm = T)
((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
View(p)
(sum(Gen_org[,i] == dom_allele[[i]], na.rm = T) + sum(Gen_org[,i] == 1, na.rm = T))/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
sum(Gen_org[,1] == dom_allele[[1]])
sum(Gen_org[,2] == dom_allele[[2]])
View(dom_allele)
sum(Gen_org[,3] == dom_allele[[3]])
sum(Gen_org[,4] == dom_allele[[4]])
sum(Gen_org[,4] == dom_allele[[4]], na.rm = T)
sum(Gen_org[,4])
sum(Gen_org[,4], na.rm = T)
i = 1
sum(Gen_org[,i] == dom_allele[[i]], na.rm = T)
sum(Gen_org[,i] == 1, na.rm = T)
sum(Gen_org[,i] == 2, na.rm = T)
sum(Gen_org[,i] == 0, na.rm = T)
sum(Gen_org[,i] == dom_allele[[i]], na.rm = T)
(nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))
(nrow(Gen_org) - sum(is.na(Gen_org[,i])))
sum(Gen_org[,i] == dom_allele[[i]], na.rm = T)/(nrow(Gen_org) - sum(is.na(Gen_org[,i])))
sum(Gen_org[,i] == 1, na.rm = T)/(nrow(Gen_org) - sum(is.na(Gen_org[,i])))
sum(Gen_org[,i] == 1, na.rm = T)/(nrow(Gen_org) - sum(is.na(Gen_org[,i])) * 2)
(nrow(Gen_org) - sum(is.na(Gen_org[,i])) * 2)
(nrow(Gen_org) - sum(is.na(Gen_org[,i]))\*2)
(nrow(Gen_org) - sum(is.na(Gen_org[,i]))*2)
(nrow(Gen_org) - sum(is.na(Gen_org[,i])))
(nrow(Gen_org) - sum(is.na(Gen_org[,i]))) * 2
((nrow(Gen_org) - sum(is.na(Gen_org[,i]))) * 2)
sum(Gen_org[,i] == 1, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,i]))) * 2)
p_hom + p_het
# Count how many of the dominant alleles there are (homozygotes = 0, but contribute 2 alleles and heterozygoes) divide that by the number of individuals with data * 2
p_hom <- sum(Gen_org[,i] == dom_allele[[i]], na.rm = T)/(nrow(Gen_org) - sum(is.na(Gen_org[,i])))
p_het <- sum(Gen_org[,i] == 1, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,i]))) * 2)
p_hom + p_het
(sum(Gen_org[,i] == dom_allele[[i]], na.rm = T)*2)/((nrow(Gen_org) - sum(is.na(Gen_org[,i])))*2)
# Then you could calculate p and q
p <- list()
q <- list()
for(i in 1:4){
# Count the number of homozygote individuals with the dominant allele, p_hom = frequency of the homozygote genotype, you are also welcome to multiply it by 2 to get the number of alleles, just remember to do the same for the individuals
p_hom <- sum(Gen_org[,i] == dom_allele[[i]], na.rm = T)/(nrow(Gen_org) - sum(is.na(Gen_org[,i])))
p_het <- sum(Gen_org[,i] == 1, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,i]))) * 2)
p[[i]] <- p_hom + p_het
q[[i]] <- 1-p[[i]]
remove(hom_p)
remove(het_p)
}
# Then you could calculate p and q
p <- list()
q <- list()
for(i in 1:4){
# Count the number of homozygote individuals with the dominant allele, p_hom = frequency of the homozygote genotype, you are also welcome to multiply it by 2 to get the number of alleles, just remember to do the same for the individuals
p_hom <- sum(Gen_org[,i] == dom_allele[[i]], na.rm = T)/(nrow(Gen_org) - sum(is.na(Gen_org[,i])))
p_het <- sum(Gen_org[,i] == 1, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,i]))) * 2)
p[[i]] <- p_hom + p_het
q[[i]] <- 1-p[[i]]
remove(p_hom)
remove(p_het)
}
View(p)
View(q)
### Load in data
genind_data <- readRDS("bfly_data.rds")
# Isolate genetic data
sampled_data <- genind_data[sample(nInd(genind_data), size = 30), ]
# Get the original data (NAs are NA)
Gen_org <- sampled_data@tab
# Modify and extract modified data
sampled_data@tab[is.na(sampled_data@tab)] <- 0
Gen_mod <- sampled_data@tab
# Calculate p and q, 2 = homozygote for that particular allele, 1 = heterozygote (see Page 10 of https://adegenet.r-forge.r-project.org/files/tutorial-basics.pdf)
# KF code to account for NAs
p1 <- colSums(Gen_org[,1:4] == 0, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:4])))* 2)
# Original code to caldulate p
p2 <- colSums(Gen_mod[,1:4] == 0) / (nrow(Gen_mod) * 2)
# Compare them
p1
p2
freq0 <- colSums(Gen_org[,1:4] == 0, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:4])))* 2)
freq2 <- colSums(Gen_org[,1:4] == 2, na.rm = T)/((nrow(Gen_org) - colSums(is.na(Gen_org[,1:4])))* 2)
dom_allele <- list()
for (i in 1:4){
freq0 <- sum(Gen_org[,i] == 0, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
freq2 <- sum(Gen_org[,i] == 2, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
if(freq0 >= freq2){
dom_allele[[i]] <- 0
} else {
dom_allele[[i]] <- 2
}
}
# Then you could calculate p and q
p <- list()
(sum(Gen_org[,i] == 0, na.rm = T)*2) + sum(Gen_org[,i] == 1, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
((sum(Gen_org[,i] == 0, na.rm = T)*2) + sum(Gen_org[,i] == 1, na.rm = T))/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
i = 1
((sum(Gen_org[,i] == 0, na.rm = T)*2) + sum(Gen_org[,i] == 1, na.rm = T))/((nrow(Gen_org) - sum(is.na(Gen_org[,1:4])))* 2)
freq0 <- ((sum(Gen_org[,i] == 0, na.rm = T)*2) + sum(Gen_org[,i] == 1, na.rm = T))/((nrow(Gen_org) - sum(is.na(Gen_org[,i])))* 2)
((sum(Gen_org[,i] == 0, na.rm = T)*2) + sum(Gen_org[,i] == 1, na.rm = T))/((nrow(Gen_org) - sum(is.na(Gen_org[,i])))* 2)
((sum(Gen_org[,i] == 2, na.rm = T)*2) + sum(Gen_org[,i] == 1, na.rm = T))/((nrow(Gen_org) - sum(is.na(Gen_org[,i])))* 2)
sum(Gen_org[,i] == 2, na.rm = T)
sum(Gen_org[,i] == 1, na.rm = T)
dom_allele <- list()
for (i in 1:4){
freq0 <- ((sum(Gen_org[,i] == 0, na.rm = T)*2) + sum(Gen_org[,i] == 1, na.rm = T))/((nrow(Gen_org) - sum(is.na(Gen_org[,i])))* 2)
freq2 <- ((sum(Gen_org[,i] == 2, na.rm = T)*2) + sum(Gen_org[,i] == 1, na.rm = T))/((nrow(Gen_org) - sum(is.na(Gen_org[,i])))* 2)
if(freq0 >= freq2){
dom_allele[[i]] <- 0
} else {
dom_allele[[i]] <- 2
}
}
# Then you could calculate p and q
p <- list()
q <- list()
for(i in 1:4){
# Count the number of homozygote individuals with the dominant allele, p_hom = frequency of the dominant allele in the homozygotes,
p_hom <- (sum(Gen_org[,i] == dom_allele[[i]], na.rm = T)*2)/((nrow(Gen_org) - sum(is.na(Gen_org[,i])))*2)
p_het <- sum(Gen_org[,i] == 1, na.rm = T)/((nrow(Gen_org) - sum(is.na(Gen_org[,i]))) * 2)
p[[i]] <- p_hom + p_het
q[[i]] <- 1-p[[i]]
remove(p_hom)
remove(p_het)
}
View(p)
sum(Gen_org[,i] == 0, na.rm = T)
i = 3
sum(Gen_org[,i] == 0, na.rm = T)
